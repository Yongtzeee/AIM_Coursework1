import random
import numpy as np

import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import statistics

from scipy import stats

# # box plotting
# original_results = [72.7000, 74.8100, 69.0400, 69.5000, 54.7900, 73.1500, 74., 9.5800, 74.2900, 72., 9.7400, 63.6500, 72.0200, 73.4300, 70.5900, 69.9400, 9.7400, 72.3100, 72.8400, 22.8600, 46.5500, 71.9500, 64.6500, 30.3900, 72.0500, 75.4700, 76.2100, 74.6500, 9.7400, 73.6900, 45.2000, 66.9600, 68.0800, 74.6200, 56.6600, 73.4900, 76.7700, 73.9900, 27.9900, 62.8900, 9.7400, 76.3700, 9.7400, 35.5100, 9.7400, 69.4800, 66.0200, 71.7000, 71.9800, 22.9100, 71.6200, 72.1700, 60.7000, 72.3500, 72.9200, 75.5800, 66.7300, 70.2900, 36.7000, 72.7600, 71.2600, 71.9500, 71.2200, 74.5500, 64.7000, 70.6800, 67.0600, 75.3300, 59.9300, 50.0700, 73.9000, 23.9100, 10.2800, 73.8000, 13.0100, 9.7400, 28.5900, 74.1600, 9.7400, 73.6500, 60.7200, 48.5400, 74.6600, 16.8500, 73.8900, 32.0400, 74.0900, 9.5800, 71.9800, 10.2800, 67.8200, 70.2900, 73.4300, 10.2800, 71.7900, 66.7300, 10.2800, 75.5700, 67.0200, 76.6500]
# # difference_vector / diff_lr
# modified_results = [75.27999877929688, 76.31999969482422, 73.5, 73.27999877929688, 73.7699966430664, 75.79000091552734, 74.73999786376953, 74.4000015258789, 75.5999984741211, 75.0999984741211, 74.73999786376953, 74.4800033569336, 74.51000213623047, 74.75, 75.45999908447266, 73.80999755859375, 74.27999877929688, 73.61000061035156, 74.3499984741211, 73.13999938964844, 74.38999938964844, 74.55000305175781, 74.61000061035156, 74.9800033569336, 73.68000030517578, 76.02999877929688, 74.56999969482422, 74.86000061035156, 74.9800033569336, 73.66999816894531, 74.26000213623047, 76.77999877929688, 72.51000213623047, 72.7699966430664, 73.04000091552734, 73.91000366210938, 74.23999786376953, 75.76000213623047, 75.01000213623047, 75.18000030517578, 75.16999816894531, 75.58999633789062, 74.19000244140625, 73.0199966430664, 73.7300033569336, 75.12999725341797, 73.2300033569336, 73.41000366210938, 75.55000305175781, 74.30999755859375, 74.83000183105469, 73.52999877929688, 74.16000366210938, 74.25, 74.77999877929688, 74.5999984741211, 74.83000183105469, 75.0999984741211, 74.5999984741211, 75.08000183105469, 73.80999755859375, 49.06999969482422, 74.79000091552734, 75.52999877929688, 75.33999633789062, 75.43000030517578, 75.13999938964844, 74.29000091552734, 73.3499984741211, 74.83999633789062, 75.08000183105469, 75.33999633789062, 74.31999969482422, 75.2300033569336, 75.04000091552734, 73.73999786376953, 75.4800033569336, 75.88999938964844, 76.01000213623047, 73.94999694824219, 73.6500015258789, 75.98999786376953, 74.87999725341797, 75.37000274658203, 75.37000274658203, 75.0999984741211, 75.33000183105469, 73.69000244140625, 73.66999816894531, 73.9000015258789, 75.08000183105469, 76.16000366210938, 73.69000244140625, 75.06999969482422, 75.18000030517578, 72.37000274658203, 74.80999755859375, 73.88999938964844, 72.91000366210938, 76.80999755859375]
# # diff_lr / difference_vector
# modified_results = [75.25, 73.19000244140625, 75.01000213623047, 74.54000091552734, 75.58000183105469, 73.0199966430664, 73.86000061035156, 74.95999908447266, 75.56999969482422, 73.68000030517578, 73.77999877929688, 73.62999725341797, 73.05999755859375, 72.37999725341797, 76.47000122070312, 74.9800033569336, 74.54000091552734, 74.7699966430664, 74.77999877929688, 76.4800033569336, 75.25, 73.19000244140625, 75.01000213623047, 74.54000091552734, 75.58000183105469, 73.0199966430664, 73.86000061035156, 74.95999908447266, 75.56999969482422, 73.68000030517578, 73.77999877929688, 73.62999725341797, 73.05999755859375, 72.37999725341797, 76.47000122070312, 74.9800033569336, 74.54000091552734, 74.7699966430664, 74.77999877929688, 76.4800033569336, 75.25, 73.19000244140625, 75.01000213623047, 74.54000091552734, 75.58000183105469, 73.0199966430664, 73.86000061035156, 74.95999908447266, 75.56999969482422, 73.68000030517578, 73.77999877929688, 73.62999725341797, 73.05999755859375, 72.37999725341797, 76.47000122070312, 74.9800033569336, 74.54000091552734, 74.7699966430664, 74.77999877929688, 76.4800033569336, 75.25, 73.19000244140625, 75.01000213623047, 74.54000091552734, 75.58000183105469, 73.0199966430664, 73.86000061035156, 74.95999908447266, 75.56999969482422, 73.68000030517578, 73.77999877929688, 73.62999725341797, 73.05999755859375, 72.37999725341797, 76.47000122070312, 74.9800033569336, 74.54000091552734, 74.7699966430664, 74.77999877929688, 76.4800033569336, 75.25, 73.19000244140625, 75.01000213623047, 74.54000091552734, 75.58000183105469, 73.0199966430664, 73.86000061035156, 74.95999908447266, 75.56999969482422, 73.68000030517578, 73.77999877929688, 73.62999725341797, 73.05999755859375, 72.37999725341797, 76.47000122070312, 74.9800033569336, 74.54000091552734, 74.7699966430664, 74.77999877929688, 76.4800033569336]

# loss
original_results = []
modified_results = [0.8766345381736755, 0.7999666929244995, 1.354111909866333, 1.379517912864685, 0.7812432646751404, 1.0502012968063354, 0.9036309123039246, 1.0750515460968018, 0.7159572243690491, 1.7458711862564087, 0.7517401576042175, 0.941806435585022, 0.863763153553009, 0.9437345266342163, 0.8030058145523071, 1.1339035034179688, 1.293666124343872, 0.8525089621543884, 0.7500411868095398, 0.7717461585998535, 1.2025375366210938, 0.9773043990135193, 0.7296051383018494, 0.7798811197280884, 1.1189658641815186, 1.125550627708435, 0.8994027972221375, 0.741346001625061, 1.0436526536941528, 0.935101330280304, 0.7721678018569946, 0.6914827823638916, 0.8903249502182007, 0.8841387629508972, 0.8451590538024902, 0.8326677680015564, 0.7567033767700195, 0.7801741361618042, 5.006506443023682, 1.2806836366653442, 0.9131534695625305, 1.4958900213241577, 0.7282403707504272, 4.527616024017334, 0.9839423298835754, 1.0596373081207275, 1.2357203960418701, 1.062200665473938, 0.8280300498008728, 1.2679919004440308, 1.0580123662948608, 0.7521676421165466, 0.7067766785621643, 0.799254298210144, 1.5251960754394531, 0.8741480112075806, 1.1126302480697632, 0.7461203932762146, 0.8331635594367981, 0.7997047901153564, 1.0484521389007568, 0.8102270364761353, 0.7567296624183655, 0.7664003372192383, 0.8618116974830627, 1.654192566871643, 0.940734326839447, 1.4580734968185425, 1.2844183444976807, 0.7942842841148376, 1.3238996267318726, 1.1561509370803833, 0.8593094348907471, 0.8250223398208618, 1.1975812911987305, 0.7997584939002991, 1.0509032011032104, 0.9085316061973572, 0.7675864696502686, 0.9568679332733154, 1.7683550119400024, 1.1006535291671753, 2.2470736503601074, 0.8068683743476868, 0.7835260629653931, 0.8114520907402039, 0.8861585855484009, 1.1787794828414917, 0.9025830030441284, 0.7221869230270386, 1.010450005531311, 0.9484544396400452, 1.6276757717132568, 0.7400448322296143, 1.0624423027038574, 0.8321473598480225, 1.3077579736709595, 0.9076038002967834, 1.0932239294052124, 0.7619069814682007]
data = [original_results, modified_results]

print("Original condition:")
print("Mean accuracy:         {}".format(np.mean(original_results)))
print("Standard deviation:    {}".format(np.std(original_results)))
print("Minimum accuracy:      {}".format(min(original_results)))
print("1st Quartile accuracy: {}".format(np.percentile(original_results, 25)))
print("Median accuracy:       {}".format(np.percentile(original_results, 50)))
print("3rd Quartile accuracy: {}".format(np.percentile(original_results, 75)))
print("Maximum accuracy:      {}".format(max(original_results)))
print("Interquartile range:   {}".format(np.percentile(original_results, 75) - np.percentile(original_results, 25)))

print("\nModified condition:")
print("Mean accuracy:         {}".format(np.mean(modified_results)))
print("Standard deviation:    {}".format(np.std(modified_results)))
print("Minimum accuracy:      {}".format(min(modified_results)))
print("1st Quartile accuracy: {}".format(np.percentile(modified_results, 25)))
print("Median accuracy:       {}".format(np.percentile(modified_results, 50)))
print("3rd Quartile accuracy: {}".format(np.percentile(modified_results, 75)))
print("Maximum accuracy:      {}".format(max(modified_results)))
print("Interquartile range:   {}".format(np.percentile(modified_results, 75) - np.percentile(modified_results, 25)))

print("\nWilcoxon rank sum test result:")
z_value, p_value = stats.ranksums(original_results, modified_results)
print("z-statistics: {}".format(z_value))
print("p-value: {}".format(p_value))

fig, ax = plt.subplots()
bp = ax.boxplot(data)
ax.set_title("Result of both conditions after 100 trials")
plt.ylim(0, 100)
plt.xlabel("Conditions (1 is original, 2 is modified)")
plt.ylabel("Validation accuracy (%, higher is better)")
# for element in ['boxes', 'whiskers', 'fliers', 'means', 'medians', 'caps']:
#   plt.setp(bp[element], color='red')
# plt.setp(bp['whiskers'], color='red')
# plt.setp(bp['caps'], color='red')
plt.setp(bp['medians'], color='red')

plt.show()